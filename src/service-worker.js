/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', async (event) => {
  if (event.data && event.data.type === 'GET_CURRENT_URL') {
    const allClients = await clients.matchAll({ type: 'window', includeUncontrolled: true });
    allClients.forEach(client => {
      console.log('Current URL:', client.url);
      // 추가 처리가 필요하다면 이곳에 작성
    });
  }
});

// Any other custom service worker logic can go here.

self.addEventListener('install', (event) => {
  event.waitUntil(
      caches.open('my-cache').then(cache => {
        return cache.addAll([
          '/index.html',
          '/main.js',
          '/style.css',
          '/logo.png',
          '/nude.onnx'
        ]);
      })
  );
  console.log('인스톨');
});

self.addEventListener('activate', (event) => {
  console.log('액티브');
});

self.addEventListener('fetch', (event) => {
  console.log('페치:', event.request.url);
  event.respondWith(
      caches.match(event.request).then(response => {
        // 캐시에 있으면 반환하고, 없으면 네트워크에서 가져와 캐시에 저장
        return response || fetch(event.request).then(networkResponse => {
          return caches.open('my-cache').then(cache => {
            cache.put(event.request, networkResponse.clone());
            return networkResponse;
          });
        });
      })
  );
  // 필요한 경우 캐시 처리 추가
});

self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(handleBackgroundSync());
  }
});

// 알림

async function showNotification(title, options) {
  await self.registration.showNotification(title, options);
}

async function handleBackgroundSync() {
  // 백그라운드에서 실행할 작업
    // 반복문을 사용하여 작업 실행
    for (let i = 1; i <= 15; i++) {
      // 각 반복에서 작업 수행
      console.log(`Background task ${i} executed.`);

      // 잠시 대기 (예: API 요청을 시뮬레이션)
      // 잠시 대기 (예: API 요청을 시뮬레이션)
      await new Promise(resolve => setTimeout(resolve, 5000));


  // 작업이 완료되면 알림 표시
  showNotification('작업 완료', {
    body: `백그라운드 작업 ${i} 이 완료되었습니다.`,
    icon: '/src/logo.svg' // 알림 아이콘 경로
  });
    }
}
